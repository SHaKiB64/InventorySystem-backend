import { Repository } from 'typeorm';
import { AdminEntity } from './admin.entity';
import { AdminDTO, AdminUpdateDTO, CategoryDTO, CategoryUpdateDTO, CustomerDTO, CutomerUpdateDTO, OrderDTO, ProductDTO, loginDTO } from './admin.dto';
import { JwtService } from '@nestjs/jwt';
import { MailerService } from '@nestjs-modules/mailer';
import { CustomerEntity } from './entities/customer.entity';
import { CategoryEntity } from './entities/category.entity';
import { ProductEntity } from './entities/product.entity';
import { OrderEntity } from './entities/order.entity';
export declare class AdminService {
    private adminRepository;
    private customerRepository;
    private categoryRepository;
    private productRepository;
    private orderRepository;
    private mailerService;
    private jwtService;
    findOne(logindata: loginDTO): void;
    constructor(adminRepository: Repository<AdminEntity>, customerRepository: Repository<CustomerEntity>, categoryRepository: Repository<CategoryEntity>, productRepository: Repository<ProductEntity>, orderRepository: Repository<OrderEntity>, mailerService: MailerService, jwtService: JwtService);
    getAllAdmins(): Promise<AdminEntity[]>;
    getAdminById(id: number): Promise<AdminEntity>;
    getAdminByEmail(email: string): Promise<AdminEntity>;
    getimagebyadminid(id: number): Promise<string>;
    createAdmin(adminDTO: AdminDTO): Promise<AdminEntity>;
    updateAdmin(id: number, adminUpdateDTO: AdminUpdateDTO): Promise<AdminEntity>;
    sendEmail(): Promise<void>;
    findOneBy(logindata: loginDTO): Promise<any>;
    createCustomer(customerDTO: CustomerDTO): Promise<CustomerEntity>;
    updateCustomer(id: number, customerUpdateDTO: CutomerUpdateDTO): Promise<CustomerEntity>;
    getAllCustomers(): Promise<CustomerEntity[]>;
    getimagebycustomerid(cid: number): Promise<string>;
    getCustomerById(id: number): Promise<CustomerEntity>;
    deleteCustomerById(id: number): Promise<string>;
    createCategory(categoryDTO: CategoryDTO): Promise<CategoryEntity>;
    getCategories(): Promise<CategoryEntity[]>;
    getCategoriesById(id: number): Promise<CategoryEntity>;
    updateCategory(id: number, categoryUpdateDTO: CategoryUpdateDTO): Promise<CategoryEntity>;
    deleteCategoryById(id: number): Promise<string>;
    createProduct(productDTO: ProductDTO): Promise<ProductEntity>;
    getProducts(): Promise<ProductEntity[]>;
    getProductsById(id: number): Promise<ProductEntity>;
    updateProduct(id: number, productDTO: ProductDTO): Promise<ProductEntity>;
    deleteProductById(id: number): Promise<string>;
    getAccountants(): object;
    getAccountantsById(id: string): object;
    placeOrder(id: number, orderDTO: OrderDTO): Promise<{
        order: OrderEntity;
        customerId: number;
    }>;
    getOrdersById(id: number): Promise<OrderEntity>;
    getOrders(): Promise<OrderEntity[]>;
    getOrdersByCustomerId(customerId: number): Promise<OrderEntity[]>;
    deleteOrder(id: number): Promise<string>;
}
